import logging
import weaviate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# URL Weaviate
WEAVIATE_URL = "http://localhost:8080"
CLASS_NAME = "Document"

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Weaviate
def get_client():
    return weaviate.connect_to_local(skip_init_checks=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
def create_collection():
    client = get_client()
    try:
        existing_collections = client.collections.list_all()
        if CLASS_NAME in existing_collections:
            logger.info(f"üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è {CLASS_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        client.collections.create(
            name=CLASS_NAME,
            description="Collection for storing book excerpts with semantic search",
            properties=[
                {"name": "title", "dataType": "text"},
                {"name": "author", "dataType": "text"},
                {"name": "text", "dataType": "text"},
                {"name": "page", "dataType": "int"},
                {"name": "published_year", "dataType": "int"},
                {"name": "language", "dataType": "text"},
            ],
            vector_index_config={
                "vectorizer": "text2vec-transformers"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±
            }
        )
        logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {CLASS_NAME} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
    finally:
        client.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
def add_document(document: dict):
    client = get_client()
    try:
        collection = client.collections.get(CLASS_NAME)
        collection.data.insert(document)
        logger.info("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
    finally:
        client.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
def test_add_document():
    test_document = {
        "title": "Sample Book Title",
        "author": "Author Name",
        "text": "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç—Ä—ã–≤–∫–∞ –∏–∑ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é text2vec-transformers.",
        "page": 10,
        "published_year": 2025,
        "language": "en"
    }
    add_document(test_document)

def search_by_similarity(query_text: str, limit: int = 5):
    client = get_client()
    try:
        collection = client.collections.get(CLASS_NAME)
        response = collection.query.near_text(
            query=query_text,
            limit=limit
        )
        return response.objects
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–∏—Å–∫–µ: {e}")
        return []

def search_by_keyword(query_text: str, limit: int = 5) -> list:
    client = get_client()
    try:
        collection = client.collections.get(CLASS_NAME)
        response = collection.query.bm25(
            query=query_text,
            limit=limit
        )
        # # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ dict, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç properties
        # documents = [dict(obj.properties) if hasattr(obj, "properties") else obj for obj in response.objects]
        return response.objects
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {e}")
        return []


def search_hybrid(query_text: str, limit: int = 5, alpha: float = 0.5):
    client = get_client()
    try:
        collection = client.collections.get(CLASS_NAME)
        response = collection.query.hybrid(
            query=query_text,
            limit=limit,
            alpha=alpha
        )
        return response.objects
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–º –ø–æ–∏—Å–∫–µ: {e}")
        return []



# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    create_collection()       # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é (–µ—Å–ª–∏ –Ω–µ—Ç)
    test_add_document()       # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
