import logger.logger_config as logger_config
import logging

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
for logger_name in (
    "socketio",
    "socketio.server",
    "engineio",
    "engineio.server",
    "uvicorn",
    "uvicorn.error",
    "uvicorn.access",
):
    logging.getLogger(logger_name).setLevel(logging.ERROR)

import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from socket_manager import sio
from socketio import ASGIApp

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º router –∏–∑ client_load_book
from load_book.client_load_book import router as upload_router

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],        # –†–∞–∑—Ä–µ—à–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    allow_credentials=True,
    allow_methods=["*"],        # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP-–º–µ—Ç–æ–¥—ã
    allow_headers=["*"],        # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Socket.IO
socket_app = ASGIApp(sio, other_asgi_app=app)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º router –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api
app.include_router(upload_router, prefix="/api")

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
logger.info("üöÄ –°–µ—Ä–≤–µ—Ä FastAPI + Socket.IO –∑–∞–ø—É—â–µ–Ω...")

# –ü—Ä–æ—Å—Ç–∞—è REST —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
@app.get("/")
def read_root():
    logger.info("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç `/`")
    return {"message": "Hello from FastAPI + Socket.IO"}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
def start():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ 0.0.0.0:5041...")
        uvicorn.run(socket_app, host="0.0.0.0", port=5041)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    start()
